using System;
using System.Collections;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Text;
using System.Xml;
using System.IO;
using System.Xml.Linq;
using lpsolve55;


public partial class test_lp : System.Web.UI.Page
{
    public csCluster cluster = new csCluster();
    public csCluster initialCluster = new csCluster();

    Int16 metricType = 0;

    public attr_Obj att = new attr_Obj("range", 0, 0, "0", "0","0", "positive");
    public S_Obj S1 = new S_Obj(null, null, null, null);
    public S_Obj[] S_assign_Xml = new S_Obj[6];
    public S_Obj[] Single_result = new S_Obj[6];
    public S_Obj[] Range_result = new S_Obj[6];
    public S_Obj[] Fuzzy_result = new S_Obj[6];
    public S_Obj[] whole_result = new S_Obj[6];
    public S_Obj[] whole_result_soft = new S_Obj[6];
    
    public S_Obj[] Intersection_result = new S_Obj[6];
    public S_Obj S_init = new S_Obj(null, null, null, null);
    public S_Obj S_print = new S_Obj(null, null, null, null);

    public string[] attr_Order = { "reliability", "responsetime", "price", "authentication" }; 

    public S_Obj S_assign = new S_Obj(new attr_Obj("range", 0, 0, "0", "0","0", "positive"),
                                      new attr_Obj("range", 0, 0, "0", "0", "0", "positive"),
                                      new attr_Obj("range", 0, 0, "0", "0", "0", "positive"),
                                      new attr_Obj("range", 0, 0, "0", "0","0", "positive"));
    public S_Obj request = new S_Obj(new attr_Obj("range", 0, 0, "0", "0", "0", "positive"),
                                      new attr_Obj("range", 0, 0, "0", "0", "0", "positive"),
                                      new attr_Obj("range", 0, 0, "0", "0", "0", "positive"),
                                      new attr_Obj("range", 0, 0, "0", "0","0", "positive"));

    public S_Obj S_beRanked = new S_Obj(null, null, null, null);
    public S_Obj selected = new S_Obj(null, null, null, null);
    

    protected void Page_Load(object sender, EventArgs e)
    {

    }
    protected void Button1_Click(object sender, EventArgs e)
    {
        for (int i = 0; i < 6; i++)
        {
            lp_solve(S_assign_Xml[i] , i);
        }
    }
    
    void print_S(S_Obj S_print, int cnt)
    {
        string str_Sname = "";
        if (cnt == 0)
            str_Sname = "req";
        else
            str_Sname = "S" + cnt.ToString();
        
        TextBox2.Text += str_Sname + ":" + S_print.reliability.val.ToString() + "  " + S_print.responsetime.val.ToString() + "  " +
                        S_print.price.val.ToString() + "  " + S_print.authentication.val.ToString() + "\n" ;
    }
    protected void btnPrint_Click(object sender, EventArgs e)
    {
        //initialize_services();
        //print_S();
    }


    string readfromxmlfile(string str_filename, StringBuilder strXml, S_Obj S_assign)
    {
        XmlTextReader reader = new XmlTextReader(str_filename);
        string strInnerXML = "";
        while (reader.Read())
        {
            switch (reader.NodeType)
            {
                case XmlNodeType.Element: 
                    strXml.Append("<" + reader.Name);
                    strXml.AppendLine(">");
                    break;
                case XmlNodeType.Text: 
                    strXml.AppendLine(reader.Value);
                    if (reader.Value.Equals("reliability"))
                    {
                        reader.ReadToFollowing("type");
                        strInnerXML = reader.ReadInnerXml();
                        S_assign.reliability.type = strInnerXML;
                        reader.ReadToFollowing("tendency");
                        strInnerXML = reader.ReadInnerXml();
                        S_assign.reliability.tendency = strInnerXML;
                        reader.ReadToFollowing("preference");
                        strInnerXML = reader.ReadInnerXml();
                        S_assign.reliability.pref_Order = Convert.ToInt32(strInnerXML);
                        reader.ReadToFollowing("relaxation");
                        strInnerXML = reader.ReadInnerXml();
                        S_assign.reliability.relax_order = Convert.ToInt32(strInnerXML); 
                        reader.ReadToFollowing("from");
                        strInnerXML = reader.ReadInnerXml();
                        S_assign.reliability.val = strInnerXML;
                        S_assign.reliability.upper_val = strInnerXML;
                        reader.ReadToFollowing("to");
                        strInnerXML = reader.ReadInnerXml();
                        S_assign.reliability.lower_val = strInnerXML;
                        strXml.AppendLine(S_assign.reliability.val.ToString());
                    }
                    if (reader.Value.Equals("responsetime"))
                    {
                        reader.ReadToFollowing("type");
                        strInnerXML = reader.ReadInnerXml();
                        S_assign.responsetime.type = strInnerXML;
                        reader.ReadToFollowing("tendency");
                        strInnerXML = reader.ReadInnerXml();
                        S_assign.responsetime.tendency = strInnerXML;
                        reader.ReadToFollowing("preference");
                        strInnerXML = reader.ReadInnerXml();
                        S_assign.responsetime.pref_Order = Convert.ToInt32(strInnerXML);
                        reader.ReadToFollowing("relaxation");
                        strInnerXML = reader.ReadInnerXml();
                        S_assign.responsetime.relax_order = Convert.ToInt32(strInnerXML);
                        reader.ReadToFollowing("from");
                        strInnerXML = reader.ReadInnerXml();
                        S_assign.responsetime.val = strInnerXML;
                        S_assign.responsetime.upper_val = strInnerXML;
                        reader.ReadToFollowing("to");
                        strInnerXML = reader.ReadInnerXml();
                        S_assign.responsetime.lower_val = strInnerXML;
                        strXml.AppendLine(S_assign.responsetime.val.ToString());
                    }
                   
                    if (reader.Value.Equals("price"))
                    {
                        reader.ReadToFollowing("type");
                        strInnerXML = reader.ReadInnerXml();
                        S_assign.price.type = strInnerXML;
                        reader.ReadToFollowing("tendency");
                        strInnerXML = reader.ReadInnerXml();
                        S_assign.price.tendency = strInnerXML;
                        reader.ReadToFollowing("preference");
                        strInnerXML = reader.ReadInnerXml();
                        S_assign.price.pref_Order = Convert.ToInt32(strInnerXML);
                        reader.ReadToFollowing("relaxation");
                        strInnerXML = reader.ReadInnerXml();
                        S_assign.price.relax_order = Convert.ToInt32(strInnerXML);
                        reader.ReadToFollowing("from");
                        strInnerXML = reader.ReadInnerXml();
                        S_assign.price.val = strInnerXML.ToString();
                        S_assign.price.upper_val = strInnerXML;
                        reader.ReadToFollowing("to");
                        strInnerXML = reader.ReadInnerXml();
                        S_assign.price.lower_val = strInnerXML;
                        strXml.AppendLine(S_assign.price.val.ToString());
                    }
                    if (reader.Value.Equals("authentication"))
                    {
                        reader.ReadToFollowing("type");
                        strInnerXML = reader.ReadInnerXml();
                        S_assign.authentication.type = strInnerXML;
                        reader.ReadToFollowing("tendency");
                        strInnerXML = reader.ReadInnerXml();
                        S_assign.authentication.tendency = strInnerXML;
                        reader.ReadToFollowing("preference");
                        strInnerXML = reader.ReadInnerXml();
                        S_assign.authentication.pref_Order = Convert.ToInt32(strInnerXML);
                        reader.ReadToFollowing("relaxation");
                        strInnerXML = reader.ReadInnerXml();
                        S_assign.authentication.relax_order = Convert.ToInt32(strInnerXML);
                        reader.ReadToFollowing("from");
                        strInnerXML = reader.ReadInnerXml();
                        S_assign.authentication.val = Convert.ToBoolean(strInnerXML);
                        S_assign.authentication.upper_val = Convert.ToBoolean(strInnerXML);
                        reader.ReadToFollowing("to");
                        strInnerXML = reader.ReadInnerXml();
                        S_assign.authentication.lower_val = Convert.ToBoolean(strInnerXML);
                        strXml.AppendLine(S_assign.authentication.val.ToString());
                    }
                    break;
                case XmlNodeType.EndElement: 
                    strXml.Append("</" + reader.Name);
                    strXml.AppendLine(">");
                    break;
               
            }
        }
        strXml.AppendLine();
        return strXml.ToString();
        //return S_assign;
    }
    protected void btnXml_Click(object sender, EventArgs e)
    {
        StringBuilder str_Xml = new StringBuilder();
        string[] str_file = { "", "", "", "", "", "", "", "" };
        StreamReader textReader = File.OpenText("C:\\Users\\delnavaz\\Documents\\Visual Studio 2008\\WebSites\\myQL\\App_Data\\input.txt");
        for (int i = 0; i < 6; i++)
        {
            S_assign_Xml[i] = new S_Obj(new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"));

            str_file[i] = textReader.ReadLine();
            str_Xml.AppendLine(readfromxmlfile(str_file[i], str_Xml, S_assign_Xml[i]));

            print_S(S_assign_Xml[i], i);
            //lp_solve(S_assign_Xml[i], i);
            request = S_assign_Xml[0];

            Single_result[i] = new S_Obj(new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"));

            Single_result[i] = selection_Single(S_assign_Xml[i]);
            if (Single_result[i].isEmpty(Single_result[i]) == false)
                TextBox3.Text += "single matched:" + Single_result[i].reliability.val.ToString() + "  " + Single_result[i].responsetime.val.ToString() + "  " +
                    Single_result[i].price.val.ToString() + "  " + Single_result[i].authentication.val.ToString() + "\n";

            Range_result[i] = selection_Range(S_assign_Xml[i]);
            if (Range_result[i].isEmpty(Range_result[i]) == false)
                TextBox3.Text += "range matched:" + Range_result[i].reliability.val.ToString() + "  " + Range_result[i].responsetime.val.ToString() + "  " +
                    Range_result[i].price.val.ToString() + "  " + Range_result[i].authentication.val.ToString() + "\n";

            //Fuzzy_result[i] = selection(S_assign_Xml[i]);            //print_S(Single_result[i], i);
            whole_result[i] = new S_Obj(new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"));
        }

        whole_result = intersection(Single_result, Range_result);
        int empty_whole = 0;
        for (int p = 1; p < 6; p++)
        {
            if (whole_result[p].isEmpty(whole_result[p]) == false)
            {
                empty_whole++;
                print_S(whole_result[p], p);
                whole_result_soft[p] = new S_Obj(new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"));
            }
        }
        if (empty_whole == 0) // it means the whole intersection is empty
            Label2.Text = "There is no match for your requirements please modify your constraints"; //other works
        else
        {
            Label2.Text = empty_whole.ToString() + "   there is some match"; //procede with checking soft constraints
            for (int j = 1; j < 6; j++)
            {
                Single_result[j] = new S_Obj(new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"));

                Single_result[j] = selection_Single_Soft(whole_result[j]);
                if (Single_result[j].isEmpty(Single_result[j]) == false)
                    TextBox3.Text += "single matched:" + Single_result[j].reliability.val.ToString() + "  " + Single_result[j].responsetime.val.ToString() + "  " +
                        Single_result[j].price.val.ToString() + "  " + Single_result[j].authentication.val.ToString() + "\n";
            }

        }

        whole_result_soft = intersection(Single_result, Range_result);
        int empty_whole2 = 0;
        for (int p = 1; p < 6; p++)
        {
            if (whole_result_soft[p].isEmpty(whole_result_soft[p]) == false)
            {
                ++empty_whole2;
                //print_S(whole_result_soft[p], p);
            }
        }
        if (empty_whole2 == 0) // it means the whole intersection of soft constraints is empty
        {
            Label2.Text = "There is no match for the soft constraints"; //relaxation
            for (int g = 1; g < 6; g++)
            {
                for (int r = 1; r < 4; r++)
                {
                    if (r == whole_result_soft[g].reliability.relax_order)
                    {
                        whole_result_soft[g].reliability.relax_order = -1;
                        for (int j = 1; j < 6; j++)
                        {
                            Single_result[j] = new S_Obj(new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"));

                            Single_result[j] = selection_Single_Soft(whole_result[j]);
                            if (Single_result[j].isEmpty(Single_result[j]) == false)
                                TextBox3.Text += "single matched:" + Single_result[j].reliability.val.ToString() + "  " + Single_result[j].responsetime.val.ToString() + "  " +
                                    Single_result[j].price.val.ToString() + "  " + Single_result[j].authentication.val.ToString() + "\n";
                        }
                    }
                    if (r == whole_result_soft[g].responsetime.relax_order)
                    {
                        whole_result_soft[g].responsetime.relax_order = -1;
                        for (int j = 1; j < 6; j++)
                        {
                            Single_result[j] = new S_Obj(new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"));

                            Single_result[j] = selection_Single_Soft(whole_result[j]);
                            if (Single_result[j].isEmpty(Single_result[j]) == false)
                                TextBox3.Text += "single matched:" + Single_result[j].reliability.val.ToString() + "  " + Single_result[j].responsetime.val.ToString() + "  " +
                                    Single_result[j].price.val.ToString() + "  " + Single_result[j].authentication.val.ToString() + "\n";
                        }
                    }
                    if (r == whole_result_soft[g].price.relax_order)
                    {
                        whole_result_soft[g].price.relax_order = -1;
                        for (int j = 1; j < 6; j++)
                        {
                            Single_result[j] = new S_Obj(new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"));

                            Single_result[j] = selection_Single_Soft(whole_result[j]);
                            if (Single_result[j].isEmpty(Single_result[j]) == false)
                                TextBox3.Text += "single matched:" + Single_result[j].reliability.val.ToString() + "  " + Single_result[j].responsetime.val.ToString() + "  " +
                                    Single_result[j].price.val.ToString() + "  " + Single_result[j].authentication.val.ToString() + "\n";
                        }
                    }
                    if (r == whole_result_soft[g].authentication.relax_order)
                    {
                        whole_result_soft[g].authentication.relax_order = -1;
                        for (int j = 0; j < 6; j++)
                        {
                            Single_result[j] = new S_Obj(new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"));

                            Single_result[j] = selection_Single_Soft(whole_result[j]);
                            if (Single_result[j].isEmpty(Single_result[j]) == false)
                                TextBox3.Text += "single matched:" + Single_result[j].reliability.val.ToString() + "  " + Single_result[j].responsetime.val.ToString() + "  " +
                                    Single_result[j].price.val.ToString() + "  " + Single_result[j].authentication.val.ToString() + "\n";
                        }
                    }
                        /*if (qi.relax == qi + 1.relax)
                        {
                            if (qi.pref >= qi + 1.pref)
                                qi.value.remove();
                            else
                                qi + 1.value.remove();
                        }*/
                }
            }
        }
        else
        {
            Label2.Text += empty_whole2.ToString() + "   there is some match with soft constraint"; //procede with checking soft constraints
        }
    }
    double lp_solve(S_Obj S_beRanked, int counter)
    {
        string attr_name = "";
        string[] uq = new string[24];
        double rank_whole = 0.0;
        double min = 0.0, max = 0.0;
        for (int k = 0; k < 4; k++)
        {
            attr_name = attr_Order[k].ToString();

            int lp;
            lp = lpsolve55.lpsolve.make_lp(0, 2);
            
            lpsolve55.lpsolve.set_col_name(lp, 1, attr_name);            //lpsolve55.lpsolve.set_col_name(lp, 1, "x3"); //x3:price
            lpsolve55.lpsolve.set_col_name(lp, 2, "c");
            if (S_beRanked.find_tendency(attr_name).ToString() == "negative")
                lpsolve55.lpsolve.set_maxim(lp);
            if (S_beRanked.find_tendency(attr_name).ToString() == "positive")
                lpsolve55.lpsolve.set_minim(lp);
            if (S_beRanked.find_tendency(attr_name).Equals("neutral"))
                lpsolve55.lpsolve.set_maxim(lp);

            max = find_max(attr_name);
            min = find_min(attr_name);
            double w = find_weight(attr_name, S_beRanked.find_pref_order(attr_name));
            uq[k] = (w / (max - min)).ToString();
            uq[k] += " " + ( - w * min / (max - min)).ToString();
            //uq[k] = (attr_name + "-" + min.ToString())  / (max - min).ToString(); 
            lpsolve55.lpsolve.str_set_obj_fn(lp, uq[k].ToString()); // "0.1 -8");
            //lpsolve55.lpsolve.str_add_constraint(lp, "1 0", lpsolve.lpsolve_constr_types.EQ, 99); //S6
            if (S_beRanked.find_tendency(attr_name).ToString() == "positive")
                lpsolve55.lpsolve.str_add_constraint(lp, "1 0", lpsolve.lpsolve_constr_types.GE, Convert.ToDouble(S_beRanked.find_val(attr_name))); //price.val));
            if (S_beRanked.find_tendency(attr_name).ToString() == "negative")
                lpsolve55.lpsolve.str_add_constraint(lp, "1 0", lpsolve.lpsolve_constr_types.LE, Convert.ToDouble(S_beRanked.find_val(attr_name))); //price.val));
            if (S_beRanked.find_tendency(attr_name).ToString() == "neutral")
            {
                if (S_beRanked.find_val(attr_name).Equals(true)) //.Equals("true"))
                    lpsolve55.lpsolve.str_add_constraint(lp, "1 0", lpsolve.lpsolve_constr_types.EQ, 1.0);
                else  
                    lpsolve55.lpsolve.str_add_constraint(lp, "1 0", lpsolve.lpsolve_constr_types.EQ, 0.0);
            }
            
            lpsolve55.lpsolve.str_add_constraint(lp, "0 1", lpsolve.lpsolve_constr_types.EQ, 1);

            lpsolve55.lpsolve.set_outputfile(lp, "C://test3//" + attr_name + "_S" + counter.ToString() + "_result.lp"); //"test_lp2.lp");
            lpsolve55.lpsolve.write_lp(lp, "C://test3//" + attr_name + "_S" + counter.ToString() + ".lp"); //"test_lp.lp");
                           
            /*int res = lpsolve55.lpsolve.read_LP("C://test3//test_lp.lp" ,0, "ret_lp");
            lpsolve55.lpsolve.lpsolve_return lp_result;
            lp_result = lpsolve55.lpsolve.solve(res);*/

            lpsolve55.lpsolve.solve(lp);
            lpsolve55.lpsolve.print_objective(lp);
            lpsolve55.lpsolve.print_solution(lp, 2);
            lpsolve55.lpsolve.print_constraints(lp, 2);

            double rank = lpsolve55.lpsolve.get_objective(lp);

            string str_Sname = "";
            if (counter == 0)
                str_Sname = "req";
            else
                str_Sname = "S" + counter.ToString();
            TextBox1.Text += str_Sname + ":" + rank.ToString() + "\n";
            rank_whole += rank; 
            lpsolve55.lpsolve.delete_lp(lp);
        }
        TextBox1.Text += "rank :" + rank_whole.ToString() + "\n";
        return rank_whole;
    }


    double find_weight(string q_name , int q_pref)
    {
        double ret = 0.0;
        ret = (find_max_w() - q_pref + 0.1) / (find_max_w() - find_min_w());
        //ret = 1.0/q_pref * find_max_w();
        TextBox2.Text += "w:" + ret + "\n"; // +"=" + q_pref.ToString() + "-" + find_min_w().ToString() + "/" + (find_max_w().ToString() + "-" + find_min_w().ToString()) + "\n";
        return ret; 
    }

    double find_max_w()
    {
        double m_w = 0.0;
        m_w = S_assign_Xml[0].find_pref_order("price");
        if (m_w < S_assign_Xml[0].find_pref_order("reliability"))
            m_w = S_assign_Xml[0].find_pref_order("reliability");
        if (m_w < S_assign_Xml[0].find_pref_order("responsetime"))
            m_w = S_assign_Xml[0].find_pref_order("responsetime");
        if (m_w < S_assign_Xml[0].find_pref_order("authentication"))
            m_w = S_assign_Xml[0].find_pref_order("authentication");
        return m_w;
    }
    double find_min_w()
    {
        double m_w = 0.0;
        m_w = S_assign_Xml[0].find_pref_order("price");
        if (m_w > S_assign_Xml[0].find_pref_order("reliability"))
            m_w = S_assign_Xml[0].find_pref_order("reliability");
        if (m_w > S_assign_Xml[0].find_pref_order("responsetime"))
            m_w = S_assign_Xml[0].find_pref_order("responsetime");
        if (m_w > S_assign_Xml[0].find_pref_order("authentication"))
            m_w = S_assign_Xml[0].find_pref_order("authentication");
        return m_w;
    }
    double find_max(string q_name)
    {
        object max_obj = new object();
        object compare_obj = new object();
        max_obj = S_assign_Xml[0].find_val(q_name);
        for (int a = 0; a < S_assign_Xml.Length; a++)
        {
            compare_obj = S_assign_Xml[a].find_val(q_name);
            if (S_assign_Xml[a].find_type(q_name).ToString() == "range")
            {
                if (Convert.ToDouble(max_obj) < Convert.ToDouble(compare_obj))
                    max_obj = compare_obj;
            }
            if (S_assign_Xml[a].find_type(q_name).ToString() == "single")
            {
                if (S_assign_Xml[a].find_val(q_name).ToString() == "false")
                    max_obj = 0.0;
                else
                    if (max_obj.ToString() != "0.0")
                        max_obj = 1.0;

            }

        }
        return Convert.ToDouble(max_obj); 
    }
    double find_min(string q_name)
    {
        object min_obj = new object();
        object compare_obj = new object();
        min_obj = S_assign_Xml[0].find_val(q_name);
        for (int a = 1; a < 6; a++)
        {
            compare_obj = S_assign_Xml[a].find_val(q_name);
            if (S_assign_Xml[a].find_type(q_name).ToString() == "range")
            {
                if (Convert.ToDouble(min_obj) > Convert.ToDouble(compare_obj))
                    min_obj = compare_obj;
            }
            if (S_assign_Xml[a].find_type(q_name).ToString() == "single")
            {
                if (S_assign_Xml[a].find_val(q_name).ToString() == "true")
                    min_obj = 1.0;
                else
                    if (min_obj.ToString() != "1.0")
                        min_obj = 0.0;

            }
        }
        return Convert.ToDouble(min_obj);
    }
    protected void btntestAssign_Click(object sender, EventArgs e)
    {
        StringBuilder str_Xml = new StringBuilder();
        string[] str_file = { "", "", "", "", "", "", "", "" };
        StreamReader textReader = File.OpenText("C:\\Users\\delnavaz\\Documents\\Visual Studio 2008\\WebSites\\myQL\\App_Data\\input.txt");
        double s_r = 0.0, req_r = 0.0;
        double[] diff = new double[6];
        double[] original_diff = new double[6];
        double[] sort_diff = new double[6];
        string[] s_name = { "S0" , "", "", "", "", "" }; //make this array, redundent element should be in one place

         for (int i = 0; i < 6; i++)
         {
             S_assign_Xml[i] = new S_Obj(new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                        new attr_Obj("range", 0, 0, "0", 0, 0, "positive"));

             str_file[i] = textReader.ReadLine();
             str_Xml.AppendLine(readfromxmlfile(str_file[i], str_Xml, S_assign_Xml[i]));
         }
         
         req_r = lp_solve(S_assign_Xml[0], 0);
         //TextBox3.Text = "req :" + req_r.ToString()+ "\n";
         for (int i = 1; i < 6; i++)
         {
             s_r = lp_solve(S_assign_Xml[i], i);
             diff[i] = Math.Abs(req_r - s_r);
             sort_diff[i] = diff[i];
             //TextBox3.Text += "S" + i.ToString() + ":" + diff[i].ToString() + "\n";
         }
         for (int i = 1; i < 6; i++)
         {
             s_name[i] = "S" + i.ToString();
         }
         for (int j = 1; j < 6; j++)
         {
             for (int k = 1; k < 6; k++)
                 if ((diff[j] == diff[k]) && (j != k))
                 {
                     s_name[j] = "S" + j.ToString() + ",S" + k.ToString();
                     //s_name[k] = "";
                     //break;
                 }
         }


         Array.Sort(sort_diff);
         for (int i = 1; i < 6; i++)
         {
             for (int h = 1; h < 6; h++)
             {
                 if (diff[h] == sort_diff[i])
                 {
                     TextBox3.Text += s_name[h] + ":" + sort_diff[i].ToString() + "\n";
                     break;
                 }
             }
             TextBox5.Text += "S" + i.ToString() + ":" + diff[i].ToString() + "\n";
             TextBox4.Text += sort_diff[i].ToString() + "\n";
         }        
    }

    S_Obj selection(S_Obj selected)
    {
        S_Obj result_single = new S_Obj(new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                       new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                       new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                       new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                       new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                       new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                       new attr_Obj("range", 0, 0, "0", 0, 0, "positive"));
        S_Obj result_range = new S_Obj(new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                       new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                       new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                       new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                       new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                       new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                       new attr_Obj("range", 0, 0, "0", 0, 0, "positive"));
        S_Obj result_fuzzy = new S_Obj(new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                       new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                       new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                       new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                       new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                       new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                       new attr_Obj("range", 0, 0, "0", 0, 0, "positive"));
        S_Obj Intersection_result = new S_Obj(new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                       new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                       new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                       new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                       new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                       new attr_Obj("range", 0, 0, "0", 0, 0, "positive"),
                                       new attr_Obj("range", 0, 0, "0", 0, 0, "positive"));
        //int[] pref_Order = { 3, 2, 1, 3};
        int[] relax_Order = new int [6]; 
        string attr_name = ""; 
        
        for (int k = 0; k < 6; k++ )
        {
                attr_name = attr_Order[k].ToString();
                relax_Order[k] = selected.find_relax_order(attr_name);
                if (relax_Order[k] == 0) //find hard constraints
                {
                    switch (selected.find_type(attr_name).ToString())
                    {
                        case "single":
                                bool res_single = single(selected.find_val(attr_name), request.find_val(attr_name));
                                if (res_single == true)
                                    result_single = selected;
                                break;
                        case "range":
                                bool res_range = range(request.find_upper_val(attr_name), request.find_lower_val(attr_name),
                                                       selected.find_upper_val(attr_name), selected.find_lower_val(attr_name),
                                                       selected.find_tendency(attr_name));
                                if (res_range == true)
                                    result_range = selected;
                                break;
                        /*case "fuzzy":
                            bool res_fuzzy = fuzzy(request.find_upper_val(attr_name), request.find_lower_val(attr_name),
                                                   selected.find_upper_val(attr_name), selected.find_lower_val(attr_name),
                                                   selected.find_tendency(attr_name));
                            if (res_fuzzy == true)
                            {
                                result_fuzzy = selected;
                                TextBox3.Text += "range matched:" + result_fuzzy.reliability.val.ToString() + "  " + result_fuzzy.responsetime.val.ToString() + "  " +
                                    result_fuzzy.price.val.ToString() + "  " + result_fuzzy.authentication.val.ToString() + "\n";
                            }
                            else
                                TextBox3.Text += "no range matching\n";
                            break;*/
                    }

                }
            }
        Intersection_result = result_single;
        Intersection_result = result_range;
        return Intersection_result;  //result_fuzzy; //result_range             result_single;
       }

    S_Obj selection_Single(S_Obj selected)
    {
        S_Obj result_single = new S_Obj(new attr_Obj("range", 0, 0, "0", "0", "0", "positive"),
                                   new attr_Obj("range", 0, 0, "0", "0", "0", "positive"),
                                   new attr_Obj("range", 0, 0, "0", "0", "0", "positive"),
                                   new attr_Obj("range", 0, 0, "0", "0", "0", "positive"));
        //int[] pref_Order = { 3, 2, 1, 3};
        int[] relax_Order = new int[4];
        string attr_name = "";

        for (int k = 0; k < 4; k++)
        {
            attr_name = attr_Order[k].ToString();
            relax_Order[k] = selected.find_relax_order(attr_name);
            if (relax_Order[k] == 0) //find hard constraints
            {
                switch (selected.find_type(attr_name).ToString())
                {
                    case "single":
                        bool res_single = single(selected.find_val(attr_name), request.find_val(attr_name));
                        if (res_single == true)
                            result_single = selected;
                        break;
                }
            }
        }
        return result_single; //result_fuzzy; //result_range             
    }

    S_Obj selection_Single_Soft(S_Obj selected)
    {
        S_Obj result_single = new S_Obj(new attr_Obj("range", 0, 0, "0", "0", "0", "positive"),
                                   new attr_Obj("range", 0, 0, "0", "0", "0", "positive"),
                                   new attr_Obj("range", 0, 0, "0", "0", "0", "positive"),
                                   new attr_Obj("range", 0, 0, "0", "0", "0", "positive"));
        //int[] pref_Order = { 3, 2, 1, 3};
        int[] relax_Order = new int[4];
        string attr_name = "";

        for (int k = 0; k < 4; k++)
        {
            attr_name = attr_Order[k].ToString();
            relax_Order[k] = selected.find_relax_order(attr_name);
            if (relax_Order[k] != 0) //find hard constraints
            {
                switch (selected.find_type(attr_name).ToString())
                {
                    case "single":
                        bool res_single = single(selected.find_val(attr_name), request.find_val(attr_name));
                        if (res_single == true)
                            result_single = selected;
                        break;
                }
            }
        }
        return result_single; //result_fuzzy; //result_range             
    }

    S_Obj selection_Range(S_Obj selected)
    {
        S_Obj result_range = new S_Obj(new attr_Obj("range", 0, 0, "0", "0", "0", "positive"),
                                   new attr_Obj("range", 0, 0, "0", "0", "0", "positive"),
                                   new attr_Obj("range", 0, 0, "0", "0", "0", "positive"),
                                   new attr_Obj("range", 0, 0, "0", "0", "0", "positive"));
        //int[] pref_Order = { 3, 2, 1, 3};
        int[] relax_Order = new int[4];
        string attr_name = "";

        for (int k = 0; k < 4; k++)
        {
            attr_name = attr_Order[k].ToString();
            relax_Order[k] = selected.find_relax_order(attr_name);
            if (relax_Order[k] == 0) //find hard constraints
            {
                switch (selected.find_type(attr_name).ToString())
                {
                    case "range":
                        bool res_range = range(request.find_upper_val(attr_name), request.find_lower_val(attr_name),
                                               selected.find_upper_val(attr_name), selected.find_lower_val(attr_name),
                                               selected.find_tendency(attr_name));
                        if (res_range == true)
                            result_range = selected;
                        break;
                }
            }
        }
        return result_range;             
    }

    bool single(object req_attr , object S_attr)
        {
            if (req_attr.Equals(S_attr))
                return true;
            else
                return false;
        }

   /*  bool fuzzy(attr_Obj req_attr) // , attr_Obj S_attr)
        {
	        //cluster(qi);  //3 clusters base on qi(=quality attribute), e.g.reliability 
	        switch(req_attr.val)
	        {
		        //case "best available" :  //needs more 
					        // best available should be decided based on other quality attributes as well 
		        case "good" : 	
						        result_cluster.add(cluster_3); 
						        break;
		        case "medium" :  
						        result_cluster.add(cluster_2); //exact
						        result_cluster.add(cluster_3);  //super
						        break;
		        case "poor" :   
						        result_cluster.add(cluster_1); //exact
						        result_cluster.add(cluster_2); //super
						        result_cluster.add(cluster_3);  //super
						        break;
	        }
           result_cluster;
        }
    */

    bool range(object req_up_val, object req_low_val, object S_up_val, object S_low_val, object attr_tend)
        {
            if (Convert.ToDouble(req_up_val) == Convert.ToDouble(S_up_val))
			    {
                    if (req_low_val.Equals(S_low_val)== true) 
                        return true; //result_range.add(offer[m]);  //exact_match
                    if ((Convert.ToDouble(req_low_val) < Convert.ToDouble(S_low_val)) && (attr_tend.ToString() == "positive")) //<
				        return true; //result_range.add(offer[m]);  //super match		
                    if ((Convert.ToDouble(req_low_val) > Convert.ToDouble(S_low_val)) && (attr_tend.ToString() == "negative"))  //>
				        return true; //result_range.add(offer[m]);  //super match							
			    }
            if ((Convert.ToDouble(req_up_val) < Convert.ToDouble(S_up_val)) && (attr_tend.ToString() == "positive"))  //offer is better than request, 95% < availability
			    {
                    if ((Convert.ToDouble(req_low_val) < Convert.ToDouble(S_low_val)) && (attr_tend.ToString() == "positive"))
                       return true; //result_range.add(offer[m]);  //super match		
                    if (req_low_val == S_low_val)
                       return true; //result_range.add(offer[m]);  //super match	
                }
            if ((Convert.ToDouble(req_up_val) > Convert.ToDouble(S_up_val)) && (attr_tend.ToString() == "negative"))  //offer is better than request , e.g. 5msec > response time
			    {
                    if ((Convert.ToDouble(req_low_val) > Convert.ToDouble(S_low_val)) && (attr_tend.ToString() == "negative"))
                       return true; //result_range.add(offer[m]);  //super match		
                    if (req_low_val == S_low_val)
                       return true; //result_range.add(offer[m]);  //super match	
			    }
	        return false; 
        }

    S_Obj[] intersection(S_Obj[] Single_set, S_Obj[] Range_set) //, S_Obj Fuzzy_set)
    {
        for(int n=0; n < 6; n++)
        {
            for (int m = 0; m < 6; m++)
            {
                if (Single_set[n].isEmpty(Single_set[n]))
                {
                    whole_result[m] = Range_set[m];
                }
                {
                if(Single_set[n] == Range_set[m])
                {
                        whole_result[m] = Range_set[m];
                }
             }
          }
        }
        
        /*if(Single_set.Equals(Range_set))
            ret = true; */// the intersection is not empty
        return whole_result;
    }

    protected void btnBrowse_Click(object sender, EventArgs e)
    {
        try
        {
            DateTime startTotalTime = DateTime.Now;
            csCluster selectedCluster = new csCluster();
            csKMeans kMeans = new csKMeans();
            txtResult.Text = "";
            initialCluster = kMeans.RetrieveData("C:\\Users\\delnavaz\\Documents\\Visual Studio 2008\\WebSites\\myQL\\App_Data\\Cluster_data.txt");
            DateTime startRoutineTime = DateTime.Now;
            selectedCluster = (csCluster)(kMeans.CloneObject((csCluster)(kMeans.kMeans(initialCluster, 3))));
               // Convert.ToInt32(txtPartitions.Text)))));
            DateTime endRoutineTime = DateTime.Now;
            TimeSpan routineDuration = endRoutineTime - startRoutineTime;

            selectedCluster = (csCluster)(kMeans.CloneObject((csCluster)(GetClustersSummery(selectedCluster))));

            trvChildClusters.Nodes.Clear();

            if (selectedCluster.Count > 0)
            {
                for (int i = 0; i < selectedCluster.Count; i++)
                {
                    if (selectedCluster[i].MaxUpperBound != -1)
                    {
                        TreeNode TN = new TreeNode();
                        //TN = "";
                        trvChildClusters.Nodes.Add(TN);
                        trvChildClusters.Nodes[i].Text = trvChildClusters.Nodes[i].Text +
                            (" (" + selectedCluster[i].MinLowerBound + " , " +
                            selectedCluster[i].MaxUpperBound + ") ");
                        //trvChildClusters.Nodes[i].ImageIndex = i;
                        trvChildClusters.Nodes[i].Text = trvChildClusters.Nodes[i].Text;
                    }
                }
                cluster = (csCluster)(kMeans.CloneObject((csCluster)(selectedCluster)));
            }


            DateTime stopTotalTime = DateTime.Now;
            TimeSpan tolalDuration = stopTotalTime - startTotalTime;

            lblSummary.Text = "  Runtime's Durations:   ".PadRight(37, ' ') + "Minutes: " + cluster.RunTimeDuration.Minutes +
" - Seconds: " + cluster.RunTimeDuration.Seconds +
" - Millisecond: " + cluster.RunTimeDuration.Milliseconds + "\r\n";
            lblSummary.Text = lblSummary.Text + "  Total Durations:   ".PadRight(40, ' ') + "Minutes: " + tolalDuration.Minutes +
                " - Seconds: " + tolalDuration.Seconds + " - Millisecond: " + tolalDuration.Milliseconds + "\r\n";

           /* foreach (csDataCluster cs in cluster)
            {
                lblClustersDetails.Text += "hey ++ "; // +cs.IndexOf(cs).ToString();
            }
            */


        }
        catch (Exception ex)
        {
            bool formErr = false;
            /*if (lblAddress.Text.Trim() == "")
            {
                errErrorHandler.SetError(this.lblAddress, "Choose a file");
                formErr = true;
            }
            if (txtPartitions.Text.Trim() == "" || Convert.ToInt32(txtPartitions.Text.Trim()) == 0)
            {
                errErrorHandler.SetError(this.txtPartitions, "Define the nubmer of partitions");
                formErr = true;
            }*/
            if (!formErr)
                lblSummary.Text = "An error occured during compiling the program. The Error message is: \r\n \r\n" + ex.ToString();
        }
    }

    public csCluster GetClustersSummery(csCluster Cluster)
    {
        double clusterMinLowerBound = -1;
        double clusterMaxUpperBaound = -1;

        for (int i = 0; i < Cluster.Count; i++)
        {
            double minLowerBound = -1;
            double maxUpperBaound = -1;

            for (int z = 0; z < Cluster[i].Count; z++)
            {
                if (((double[])(((csDataCluster)(Cluster[i]))[z]))[0] < minLowerBound || minLowerBound == -1)
                {
                    minLowerBound = Cluster[i][z][0];
                    if (minLowerBound < clusterMinLowerBound || clusterMinLowerBound == -1)
                        clusterMinLowerBound = minLowerBound;
                }
                if (((double[])(((csDataCluster)(Cluster[i]))[z]))[1] > maxUpperBaound || maxUpperBaound == -1)
                {
                    maxUpperBaound = Cluster[i][z][0];
                    if (maxUpperBaound > clusterMaxUpperBaound || clusterMaxUpperBaound == -1)
                        clusterMaxUpperBaound = maxUpperBaound;
                }
            }
            Cluster[i].MinLowerBound = (minLowerBound);
            Cluster[i].MaxUpperBound = (maxUpperBaound);
        }

        return Cluster;
    }

 
    protected void trvChildClusters_SelectedNodeChanged(object sender, EventArgs e)
    {
        //csCluster cluster = new csCluster();
        csKMeans kMeans = new csKMeans();
        initialCluster = kMeans.RetrieveData("C:\\Users\\delnavaz\\Documents\\Visual Studio 2008\\WebSites\\myQL\\App_Data\\Cluster_data.txt");
        cluster = (csCluster)(kMeans.CloneObject((csCluster)(kMeans.kMeans(initialCluster, 3))));

        try
        {
            /*foreach (csDataCluster cs in cluster)
            {
                lblClustersDetails.Text = "hey ++ "; // +cs.IndexOf(cs).ToString();
            }*/

            TreeNode TN = new TreeNode();
            if (((TreeView)(sender)).Nodes.Count != 0)
            {

                TN = ((TreeView)(sender)).SelectedNode;

                int selectedItemIndex = Convert.ToInt32(((TreeView)(sender)).Nodes.IndexOf(TN));
                //e.Node.ImageIndex;
                string strCentroid = "", strFirstClosestIndividual = "", strSecondClosestIndividual = "", strThirdClosestIndividual = "";

                strCentroid = strCentroid + " (" +
                    cluster[selectedItemIndex].DataClusterCentre[0] + ", " +
                    cluster[selectedItemIndex].DataClusterCentre[1] + ") ";

                if (cluster[selectedItemIndex].ClosestIndividualToCentre != null)
                    strFirstClosestIndividual = strFirstClosestIndividual + " (" +
                        cluster[selectedItemIndex].ClosestIndividualToCentre[0] + ", " +
                        cluster[selectedItemIndex].ClosestIndividualToCentre[1] + ") ";

                if (cluster[selectedItemIndex].SecClosestIndividualToCentre != null)
                    strSecondClosestIndividual = strSecondClosestIndividual + " (" +
                       cluster[selectedItemIndex].SecClosestIndividualToCentre[0] + ", " +
                       cluster[selectedItemIndex].SecClosestIndividualToCentre[1] + ") ";

                if (cluster[selectedItemIndex].ThrClosestIndividualToCentre != null)
                    strThirdClosestIndividual = strThirdClosestIndividual + " (" +
                        cluster[selectedItemIndex].ThrClosestIndividualToCentre[0] + ", " +
                        cluster[selectedItemIndex].ThrClosestIndividualToCentre[1] + ") ";

                lblClustersDetails.Text = lblClustersDetails.Text = "  Cluster's Centre: ".PadRight(51, ' ') + strCentroid + "\r\n";
                lblClustersDetails.Text = lblClustersDetails.Text + "  First Closest individual to Centre: ".PadRight(44, ' ') +
                    strFirstClosestIndividual + "\r\n";
                lblClustersDetails.Text = lblClustersDetails.Text + "  Second Closest individual to Centre: " + strSecondClosestIndividual + "\r\n";
                lblClustersDetails.Text = lblClustersDetails.Text + "  Third Closest individual to Centre: ".PadRight(43, ' ') +
                    strThirdClosestIndividual + "\r\n";
                lblClustersDetails.Text = lblClustersDetails.Text + "  Size: ".PadRight(58, ' ') + cluster[selectedItemIndex].Size.ToString() + "\r\n";
            }

            txtResult.Text = "";
            if (((TreeView)(sender)).Nodes.Count != 0)
            {
                
                //TN = ((TreeView)(sender)).SelectedNode;

                int selectedItemIndex = Convert.ToInt32(((TreeView)(sender)).Nodes.IndexOf(TN));
                for (int i = 0; i < cluster[selectedItemIndex].Count; i++)
                {
                    txtResult.Text = txtResult.Text + " (" +
                        ((double[])(((csDataCluster)(cluster[selectedItemIndex]))[i]))[0] + ", " +
                        ((double[])(((csDataCluster)(cluster[selectedItemIndex]))[i]))[1] + ") " +
                        ((i != cluster[selectedItemIndex].Count - 1) ? " - " : "");
                    txtResult.Text = txtResult.Text + "\r\n"; ;

                }
            }
        }
        catch (Exception ex)
        {
            bool formErr = false;
            if (!formErr)
                lblSummary.Text = "An error occured during compiling the program. The Error message is: \r\n \r\n" + ex.ToString();
        }
    }
    protected void btntestCluster_Click(object sender, EventArgs e)
    {
        csCluster selectedCluster = new csCluster();
        csKMeans kMeans = new csKMeans();
        initialCluster = kMeans.RetrieveData("C:\\Users\\delnavaz\\Documents\\Visual Studio 2008\\WebSites\\myQL\\App_Data\\Cluster_data.txt");
        selectedCluster = (csCluster)(kMeans.CloneObject((csCluster)(kMeans.kMeans(initialCluster, 3))));
        foreach (csDataCluster cs in selectedCluster)
        {
            lblClustersDetails.Text += "hey ++ "; // +cs.IndexOf(cs).ToString();
        }

    }
}

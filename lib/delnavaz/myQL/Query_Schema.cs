//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4200
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=2.0.50727.42.
// 
namespace XSDSchema.Namespace {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("Query")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Query : global::System.Data.DataSet {
        
        private constraintsDataTable tableconstraints;
        
        private priceDataTable tableprice;
        
        private responseTimeDataTable tableresponseTime;
        
        private availablityDataTable tableavailablity;
        
        private timeOfUsageDataTable tabletimeOfUsage;
        
        private durationOfUsageDataTable tabledurationOfUsage;
        
        private requestFeaturesDataTable tablerequestFeatures;
        
        private preferencesDataTable tablepreferences;
        
        private itemDataTable tableitem;
        
        private RelaxationSetDataTable tableRelaxationSet;
        
        private global::System.Data.DataRelation relationconstraints_price;
        
        private global::System.Data.DataRelation relationconstraints_responseTime;
        
        private global::System.Data.DataRelation relationconstraints_availablity;
        
        private global::System.Data.DataRelation relationconstraints_timeOfUsage;
        
        private global::System.Data.DataRelation relationconstraints_durationOfUsage;
        
        private global::System.Data.DataRelation relationrequestFeatures_preferences;
        
        private global::System.Data.DataRelation relationpreferences_item;
        
        private global::System.Data.DataRelation relationRelaxationSet_item;
        
        private global::System.Data.DataRelation relationrequestFeatures_RelaxationSet;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Query() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Query(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["constraints"] != null)) {
                    base.Tables.Add(new constraintsDataTable(ds.Tables["constraints"]));
                }
                if ((ds.Tables["price"] != null)) {
                    base.Tables.Add(new priceDataTable(ds.Tables["price"]));
                }
                if ((ds.Tables["responseTime"] != null)) {
                    base.Tables.Add(new responseTimeDataTable(ds.Tables["responseTime"]));
                }
                if ((ds.Tables["availablity"] != null)) {
                    base.Tables.Add(new availablityDataTable(ds.Tables["availablity"]));
                }
                if ((ds.Tables["timeOfUsage"] != null)) {
                    base.Tables.Add(new timeOfUsageDataTable(ds.Tables["timeOfUsage"]));
                }
                if ((ds.Tables["durationOfUsage"] != null)) {
                    base.Tables.Add(new durationOfUsageDataTable(ds.Tables["durationOfUsage"]));
                }
                if ((ds.Tables["requestFeatures"] != null)) {
                    base.Tables.Add(new requestFeaturesDataTable(ds.Tables["requestFeatures"]));
                }
                if ((ds.Tables["preferences"] != null)) {
                    base.Tables.Add(new preferencesDataTable(ds.Tables["preferences"]));
                }
                if ((ds.Tables["item"] != null)) {
                    base.Tables.Add(new itemDataTable(ds.Tables["item"]));
                }
                if ((ds.Tables["RelaxationSet"] != null)) {
                    base.Tables.Add(new RelaxationSetDataTable(ds.Tables["RelaxationSet"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public constraintsDataTable constraints {
            get {
                return this.tableconstraints;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public priceDataTable price {
            get {
                return this.tableprice;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public responseTimeDataTable responseTime {
            get {
                return this.tableresponseTime;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public availablityDataTable availablity {
            get {
                return this.tableavailablity;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public timeOfUsageDataTable timeOfUsage {
            get {
                return this.tabletimeOfUsage;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public durationOfUsageDataTable durationOfUsage {
            get {
                return this.tabledurationOfUsage;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public requestFeaturesDataTable requestFeatures {
            get {
                return this.tablerequestFeatures;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public preferencesDataTable preferences {
            get {
                return this.tablepreferences;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public itemDataTable item {
            get {
                return this.tableitem;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RelaxationSetDataTable RelaxationSet {
            get {
                return this.tableRelaxationSet;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            Query cln = ((Query)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["constraints"] != null)) {
                    base.Tables.Add(new constraintsDataTable(ds.Tables["constraints"]));
                }
                if ((ds.Tables["price"] != null)) {
                    base.Tables.Add(new priceDataTable(ds.Tables["price"]));
                }
                if ((ds.Tables["responseTime"] != null)) {
                    base.Tables.Add(new responseTimeDataTable(ds.Tables["responseTime"]));
                }
                if ((ds.Tables["availablity"] != null)) {
                    base.Tables.Add(new availablityDataTable(ds.Tables["availablity"]));
                }
                if ((ds.Tables["timeOfUsage"] != null)) {
                    base.Tables.Add(new timeOfUsageDataTable(ds.Tables["timeOfUsage"]));
                }
                if ((ds.Tables["durationOfUsage"] != null)) {
                    base.Tables.Add(new durationOfUsageDataTable(ds.Tables["durationOfUsage"]));
                }
                if ((ds.Tables["requestFeatures"] != null)) {
                    base.Tables.Add(new requestFeaturesDataTable(ds.Tables["requestFeatures"]));
                }
                if ((ds.Tables["preferences"] != null)) {
                    base.Tables.Add(new preferencesDataTable(ds.Tables["preferences"]));
                }
                if ((ds.Tables["item"] != null)) {
                    base.Tables.Add(new itemDataTable(ds.Tables["item"]));
                }
                if ((ds.Tables["RelaxationSet"] != null)) {
                    base.Tables.Add(new RelaxationSetDataTable(ds.Tables["RelaxationSet"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableconstraints = ((constraintsDataTable)(base.Tables["constraints"]));
            if ((initTable == true)) {
                if ((this.tableconstraints != null)) {
                    this.tableconstraints.InitVars();
                }
            }
            this.tableprice = ((priceDataTable)(base.Tables["price"]));
            if ((initTable == true)) {
                if ((this.tableprice != null)) {
                    this.tableprice.InitVars();
                }
            }
            this.tableresponseTime = ((responseTimeDataTable)(base.Tables["responseTime"]));
            if ((initTable == true)) {
                if ((this.tableresponseTime != null)) {
                    this.tableresponseTime.InitVars();
                }
            }
            this.tableavailablity = ((availablityDataTable)(base.Tables["availablity"]));
            if ((initTable == true)) {
                if ((this.tableavailablity != null)) {
                    this.tableavailablity.InitVars();
                }
            }
            this.tabletimeOfUsage = ((timeOfUsageDataTable)(base.Tables["timeOfUsage"]));
            if ((initTable == true)) {
                if ((this.tabletimeOfUsage != null)) {
                    this.tabletimeOfUsage.InitVars();
                }
            }
            this.tabledurationOfUsage = ((durationOfUsageDataTable)(base.Tables["durationOfUsage"]));
            if ((initTable == true)) {
                if ((this.tabledurationOfUsage != null)) {
                    this.tabledurationOfUsage.InitVars();
                }
            }
            this.tablerequestFeatures = ((requestFeaturesDataTable)(base.Tables["requestFeatures"]));
            if ((initTable == true)) {
                if ((this.tablerequestFeatures != null)) {
                    this.tablerequestFeatures.InitVars();
                }
            }
            this.tablepreferences = ((preferencesDataTable)(base.Tables["preferences"]));
            if ((initTable == true)) {
                if ((this.tablepreferences != null)) {
                    this.tablepreferences.InitVars();
                }
            }
            this.tableitem = ((itemDataTable)(base.Tables["item"]));
            if ((initTable == true)) {
                if ((this.tableitem != null)) {
                    this.tableitem.InitVars();
                }
            }
            this.tableRelaxationSet = ((RelaxationSetDataTable)(base.Tables["RelaxationSet"]));
            if ((initTable == true)) {
                if ((this.tableRelaxationSet != null)) {
                    this.tableRelaxationSet.InitVars();
                }
            }
            this.relationconstraints_price = this.Relations["constraints_price"];
            this.relationconstraints_responseTime = this.Relations["constraints_responseTime"];
            this.relationconstraints_availablity = this.Relations["constraints_availablity"];
            this.relationconstraints_timeOfUsage = this.Relations["constraints_timeOfUsage"];
            this.relationconstraints_durationOfUsage = this.Relations["constraints_durationOfUsage"];
            this.relationrequestFeatures_preferences = this.Relations["requestFeatures_preferences"];
            this.relationpreferences_item = this.Relations["preferences_item"];
            this.relationRelaxationSet_item = this.Relations["RelaxationSet_item"];
            this.relationrequestFeatures_RelaxationSet = this.Relations["requestFeatures_RelaxationSet"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "Query";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Query_Schema.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableconstraints = new constraintsDataTable();
            base.Tables.Add(this.tableconstraints);
            this.tableprice = new priceDataTable();
            base.Tables.Add(this.tableprice);
            this.tableresponseTime = new responseTimeDataTable();
            base.Tables.Add(this.tableresponseTime);
            this.tableavailablity = new availablityDataTable();
            base.Tables.Add(this.tableavailablity);
            this.tabletimeOfUsage = new timeOfUsageDataTable();
            base.Tables.Add(this.tabletimeOfUsage);
            this.tabledurationOfUsage = new durationOfUsageDataTable();
            base.Tables.Add(this.tabledurationOfUsage);
            this.tablerequestFeatures = new requestFeaturesDataTable();
            base.Tables.Add(this.tablerequestFeatures);
            this.tablepreferences = new preferencesDataTable();
            base.Tables.Add(this.tablepreferences);
            this.tableitem = new itemDataTable();
            base.Tables.Add(this.tableitem);
            this.tableRelaxationSet = new RelaxationSetDataTable();
            base.Tables.Add(this.tableRelaxationSet);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("constraints_price", new global::System.Data.DataColumn[] {
                        this.tableconstraints.constraints_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableprice.constraints_IdColumn});
            this.tableprice.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("constraints_responseTime", new global::System.Data.DataColumn[] {
                        this.tableconstraints.constraints_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableresponseTime.constraints_IdColumn});
            this.tableresponseTime.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("constraints_availablity", new global::System.Data.DataColumn[] {
                        this.tableconstraints.constraints_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableavailablity.constraints_IdColumn});
            this.tableavailablity.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("constraints_timeOfUsage", new global::System.Data.DataColumn[] {
                        this.tableconstraints.constraints_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabletimeOfUsage.constraints_IdColumn});
            this.tabletimeOfUsage.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("constraints_durationOfUsage", new global::System.Data.DataColumn[] {
                        this.tableconstraints.constraints_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledurationOfUsage.constraints_IdColumn});
            this.tabledurationOfUsage.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("requestFeatures_preferences", new global::System.Data.DataColumn[] {
                        this.tablerequestFeatures.requestFeatures_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablepreferences.requestFeatures_IdColumn});
            this.tablepreferences.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("preferences_item", new global::System.Data.DataColumn[] {
                        this.tablepreferences.preferences_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableitem.preferences_IdColumn});
            this.tableitem.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("RelaxationSet_item", new global::System.Data.DataColumn[] {
                        this.tableRelaxationSet.RelaxationSet_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableitem.RelaxationSet_IdColumn});
            this.tableitem.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("requestFeatures_RelaxationSet", new global::System.Data.DataColumn[] {
                        this.tablerequestFeatures.requestFeatures_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableRelaxationSet.requestFeatures_IdColumn});
            this.tableRelaxationSet.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationconstraints_price = new global::System.Data.DataRelation("constraints_price", new global::System.Data.DataColumn[] {
                        this.tableconstraints.constraints_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableprice.constraints_IdColumn}, false);
            this.relationconstraints_price.Nested = true;
            this.Relations.Add(this.relationconstraints_price);
            this.relationconstraints_responseTime = new global::System.Data.DataRelation("constraints_responseTime", new global::System.Data.DataColumn[] {
                        this.tableconstraints.constraints_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableresponseTime.constraints_IdColumn}, false);
            this.relationconstraints_responseTime.Nested = true;
            this.Relations.Add(this.relationconstraints_responseTime);
            this.relationconstraints_availablity = new global::System.Data.DataRelation("constraints_availablity", new global::System.Data.DataColumn[] {
                        this.tableconstraints.constraints_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableavailablity.constraints_IdColumn}, false);
            this.relationconstraints_availablity.Nested = true;
            this.Relations.Add(this.relationconstraints_availablity);
            this.relationconstraints_timeOfUsage = new global::System.Data.DataRelation("constraints_timeOfUsage", new global::System.Data.DataColumn[] {
                        this.tableconstraints.constraints_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabletimeOfUsage.constraints_IdColumn}, false);
            this.relationconstraints_timeOfUsage.Nested = true;
            this.Relations.Add(this.relationconstraints_timeOfUsage);
            this.relationconstraints_durationOfUsage = new global::System.Data.DataRelation("constraints_durationOfUsage", new global::System.Data.DataColumn[] {
                        this.tableconstraints.constraints_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledurationOfUsage.constraints_IdColumn}, false);
            this.relationconstraints_durationOfUsage.Nested = true;
            this.Relations.Add(this.relationconstraints_durationOfUsage);
            this.relationrequestFeatures_preferences = new global::System.Data.DataRelation("requestFeatures_preferences", new global::System.Data.DataColumn[] {
                        this.tablerequestFeatures.requestFeatures_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablepreferences.requestFeatures_IdColumn}, false);
            this.relationrequestFeatures_preferences.Nested = true;
            this.Relations.Add(this.relationrequestFeatures_preferences);
            this.relationpreferences_item = new global::System.Data.DataRelation("preferences_item", new global::System.Data.DataColumn[] {
                        this.tablepreferences.preferences_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableitem.preferences_IdColumn}, false);
            this.relationpreferences_item.Nested = true;
            this.Relations.Add(this.relationpreferences_item);
            this.relationRelaxationSet_item = new global::System.Data.DataRelation("RelaxationSet_item", new global::System.Data.DataColumn[] {
                        this.tableRelaxationSet.RelaxationSet_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableitem.RelaxationSet_IdColumn}, false);
            this.relationRelaxationSet_item.Nested = true;
            this.Relations.Add(this.relationRelaxationSet_item);
            this.relationrequestFeatures_RelaxationSet = new global::System.Data.DataRelation("requestFeatures_RelaxationSet", new global::System.Data.DataColumn[] {
                        this.tablerequestFeatures.requestFeatures_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableRelaxationSet.requestFeatures_IdColumn}, false);
            this.relationrequestFeatures_RelaxationSet.Nested = true;
            this.Relations.Add(this.relationrequestFeatures_RelaxationSet);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeconstraints() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeprice() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeresponseTime() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeavailablity() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetimeOfUsage() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedurationOfUsage() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializerequestFeatures() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializepreferences() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeitem() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRelaxationSet() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            Query ds = new Query();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void constraintsRowChangeEventHandler(object sender, constraintsRowChangeEvent e);
        
        public delegate void priceRowChangeEventHandler(object sender, priceRowChangeEvent e);
        
        public delegate void responseTimeRowChangeEventHandler(object sender, responseTimeRowChangeEvent e);
        
        public delegate void availablityRowChangeEventHandler(object sender, availablityRowChangeEvent e);
        
        public delegate void timeOfUsageRowChangeEventHandler(object sender, timeOfUsageRowChangeEvent e);
        
        public delegate void durationOfUsageRowChangeEventHandler(object sender, durationOfUsageRowChangeEvent e);
        
        public delegate void requestFeaturesRowChangeEventHandler(object sender, requestFeaturesRowChangeEvent e);
        
        public delegate void preferencesRowChangeEventHandler(object sender, preferencesRowChangeEvent e);
        
        public delegate void itemRowChangeEventHandler(object sender, itemRowChangeEvent e);
        
        public delegate void RelaxationSetRowChangeEventHandler(object sender, RelaxationSetRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class constraintsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnconstraints_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public constraintsDataTable() {
                this.TableName = "constraints";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal constraintsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected constraintsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn constraints_IdColumn {
                get {
                    return this.columnconstraints_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public constraintsRow this[int index] {
                get {
                    return ((constraintsRow)(this.Rows[index]));
                }
            }
            
            public event constraintsRowChangeEventHandler constraintsRowChanging;
            
            public event constraintsRowChangeEventHandler constraintsRowChanged;
            
            public event constraintsRowChangeEventHandler constraintsRowDeleting;
            
            public event constraintsRowChangeEventHandler constraintsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddconstraintsRow(constraintsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public constraintsRow AddconstraintsRow() {
                constraintsRow rowconstraintsRow = ((constraintsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null};
                rowconstraintsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowconstraintsRow);
                return rowconstraintsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                constraintsDataTable cln = ((constraintsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new constraintsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnconstraints_Id = base.Columns["constraints_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnconstraints_Id = new global::System.Data.DataColumn("constraints_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnconstraints_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnconstraints_Id}, true));
                this.columnconstraints_Id.AutoIncrement = true;
                this.columnconstraints_Id.AllowDBNull = false;
                this.columnconstraints_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public constraintsRow NewconstraintsRow() {
                return ((constraintsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new constraintsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(constraintsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.constraintsRowChanged != null)) {
                    this.constraintsRowChanged(this, new constraintsRowChangeEvent(((constraintsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.constraintsRowChanging != null)) {
                    this.constraintsRowChanging(this, new constraintsRowChangeEvent(((constraintsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.constraintsRowDeleted != null)) {
                    this.constraintsRowDeleted(this, new constraintsRowChangeEvent(((constraintsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.constraintsRowDeleting != null)) {
                    this.constraintsRowDeleting(this, new constraintsRowChangeEvent(((constraintsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveconstraintsRow(constraintsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Query ds = new Query();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "constraintsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class priceDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnfrom;
            
            private global::System.Data.DataColumn columnto;
            
            private global::System.Data.DataColumn columnunit;
            
            private global::System.Data.DataColumn columnvalueType;
            
            private global::System.Data.DataColumn columnconstraints_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public priceDataTable() {
                this.TableName = "price";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal priceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected priceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fromColumn {
                get {
                    return this.columnfrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn toColumn {
                get {
                    return this.columnto;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unitColumn {
                get {
                    return this.columnunit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn valueTypeColumn {
                get {
                    return this.columnvalueType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn constraints_IdColumn {
                get {
                    return this.columnconstraints_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public priceRow this[int index] {
                get {
                    return ((priceRow)(this.Rows[index]));
                }
            }
            
            public event priceRowChangeEventHandler priceRowChanging;
            
            public event priceRowChangeEventHandler priceRowChanged;
            
            public event priceRowChangeEventHandler priceRowDeleting;
            
            public event priceRowChangeEventHandler priceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddpriceRow(priceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public priceRow AddpriceRow(int from, int to, string unit, int valueType, constraintsRow parentconstraintsRowByconstraints_price) {
                priceRow rowpriceRow = ((priceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        from,
                        to,
                        unit,
                        valueType,
                        null};
                if ((parentconstraintsRowByconstraints_price != null)) {
                    columnValuesArray[4] = parentconstraintsRowByconstraints_price[0];
                }
                rowpriceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowpriceRow);
                return rowpriceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                priceDataTable cln = ((priceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new priceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnfrom = base.Columns["from"];
                this.columnto = base.Columns["to"];
                this.columnunit = base.Columns["unit"];
                this.columnvalueType = base.Columns["valueType"];
                this.columnconstraints_Id = base.Columns["constraints_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnfrom = new global::System.Data.DataColumn("from", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfrom);
                this.columnto = new global::System.Data.DataColumn("to", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnto);
                this.columnunit = new global::System.Data.DataColumn("unit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunit);
                this.columnvalueType = new global::System.Data.DataColumn("valueType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnvalueType);
                this.columnconstraints_Id = new global::System.Data.DataColumn("constraints_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnconstraints_Id);
                this.columnfrom.AllowDBNull = false;
                this.columnto.AllowDBNull = false;
                this.columnunit.AllowDBNull = false;
                this.columnunit.DefaultValue = ((string)("$"));
                this.columnvalueType.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public priceRow NewpriceRow() {
                return ((priceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new priceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(priceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.priceRowChanged != null)) {
                    this.priceRowChanged(this, new priceRowChangeEvent(((priceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.priceRowChanging != null)) {
                    this.priceRowChanging(this, new priceRowChangeEvent(((priceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.priceRowDeleted != null)) {
                    this.priceRowDeleted(this, new priceRowChangeEvent(((priceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.priceRowDeleting != null)) {
                    this.priceRowDeleting(this, new priceRowChangeEvent(((priceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovepriceRow(priceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Query ds = new Query();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "priceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class responseTimeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnvalue;
            
            private global::System.Data.DataColumn columnunit;
            
            private global::System.Data.DataColumn columnvalueType;
            
            private global::System.Data.DataColumn columnconstraints_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public responseTimeDataTable() {
                this.TableName = "responseTime";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal responseTimeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected responseTimeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn valueColumn {
                get {
                    return this.columnvalue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unitColumn {
                get {
                    return this.columnunit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn valueTypeColumn {
                get {
                    return this.columnvalueType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn constraints_IdColumn {
                get {
                    return this.columnconstraints_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public responseTimeRow this[int index] {
                get {
                    return ((responseTimeRow)(this.Rows[index]));
                }
            }
            
            public event responseTimeRowChangeEventHandler responseTimeRowChanging;
            
            public event responseTimeRowChangeEventHandler responseTimeRowChanged;
            
            public event responseTimeRowChangeEventHandler responseTimeRowDeleting;
            
            public event responseTimeRowChangeEventHandler responseTimeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddresponseTimeRow(responseTimeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public responseTimeRow AddresponseTimeRow(int value, string unit, int valueType, constraintsRow parentconstraintsRowByconstraints_responseTime) {
                responseTimeRow rowresponseTimeRow = ((responseTimeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        value,
                        unit,
                        valueType,
                        null};
                if ((parentconstraintsRowByconstraints_responseTime != null)) {
                    columnValuesArray[3] = parentconstraintsRowByconstraints_responseTime[0];
                }
                rowresponseTimeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowresponseTimeRow);
                return rowresponseTimeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                responseTimeDataTable cln = ((responseTimeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new responseTimeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnvalue = base.Columns["value"];
                this.columnunit = base.Columns["unit"];
                this.columnvalueType = base.Columns["valueType"];
                this.columnconstraints_Id = base.Columns["constraints_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnvalue = new global::System.Data.DataColumn("value", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnvalue);
                this.columnunit = new global::System.Data.DataColumn("unit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunit);
                this.columnvalueType = new global::System.Data.DataColumn("valueType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnvalueType);
                this.columnconstraints_Id = new global::System.Data.DataColumn("constraints_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnconstraints_Id);
                this.columnvalue.AllowDBNull = false;
                this.columnunit.AllowDBNull = false;
                this.columnunit.DefaultValue = ((string)("msec"));
                this.columnvalueType.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public responseTimeRow NewresponseTimeRow() {
                return ((responseTimeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new responseTimeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(responseTimeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.responseTimeRowChanged != null)) {
                    this.responseTimeRowChanged(this, new responseTimeRowChangeEvent(((responseTimeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.responseTimeRowChanging != null)) {
                    this.responseTimeRowChanging(this, new responseTimeRowChangeEvent(((responseTimeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.responseTimeRowDeleted != null)) {
                    this.responseTimeRowDeleted(this, new responseTimeRowChangeEvent(((responseTimeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.responseTimeRowDeleting != null)) {
                    this.responseTimeRowDeleting(this, new responseTimeRowChangeEvent(((responseTimeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveresponseTimeRow(responseTimeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Query ds = new Query();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "responseTimeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class availablityDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnvalue;
            
            private global::System.Data.DataColumn columnunit;
            
            private global::System.Data.DataColumn columnvalueType;
            
            private global::System.Data.DataColumn columnconstraints_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public availablityDataTable() {
                this.TableName = "availablity";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal availablityDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected availablityDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn valueColumn {
                get {
                    return this.columnvalue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unitColumn {
                get {
                    return this.columnunit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn valueTypeColumn {
                get {
                    return this.columnvalueType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn constraints_IdColumn {
                get {
                    return this.columnconstraints_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public availablityRow this[int index] {
                get {
                    return ((availablityRow)(this.Rows[index]));
                }
            }
            
            public event availablityRowChangeEventHandler availablityRowChanging;
            
            public event availablityRowChangeEventHandler availablityRowChanged;
            
            public event availablityRowChangeEventHandler availablityRowDeleting;
            
            public event availablityRowChangeEventHandler availablityRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddavailablityRow(availablityRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public availablityRow AddavailablityRow(string value, string unit, int valueType, constraintsRow parentconstraintsRowByconstraints_availablity) {
                availablityRow rowavailablityRow = ((availablityRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        value,
                        unit,
                        valueType,
                        null};
                if ((parentconstraintsRowByconstraints_availablity != null)) {
                    columnValuesArray[3] = parentconstraintsRowByconstraints_availablity[0];
                }
                rowavailablityRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowavailablityRow);
                return rowavailablityRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                availablityDataTable cln = ((availablityDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new availablityDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnvalue = base.Columns["value"];
                this.columnunit = base.Columns["unit"];
                this.columnvalueType = base.Columns["valueType"];
                this.columnconstraints_Id = base.Columns["constraints_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnvalue = new global::System.Data.DataColumn("value", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnvalue);
                this.columnunit = new global::System.Data.DataColumn("unit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunit);
                this.columnvalueType = new global::System.Data.DataColumn("valueType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnvalueType);
                this.columnconstraints_Id = new global::System.Data.DataColumn("constraints_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnconstraints_Id);
                this.columnvalue.AllowDBNull = false;
                this.columnunit.AllowDBNull = false;
                this.columnunit.DefaultValue = ((string)("%"));
                this.columnvalueType.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public availablityRow NewavailablityRow() {
                return ((availablityRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new availablityRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(availablityRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.availablityRowChanged != null)) {
                    this.availablityRowChanged(this, new availablityRowChangeEvent(((availablityRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.availablityRowChanging != null)) {
                    this.availablityRowChanging(this, new availablityRowChangeEvent(((availablityRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.availablityRowDeleted != null)) {
                    this.availablityRowDeleted(this, new availablityRowChangeEvent(((availablityRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.availablityRowDeleting != null)) {
                    this.availablityRowDeleting(this, new availablityRowChangeEvent(((availablityRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveavailablityRow(availablityRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Query ds = new Query();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "availablityDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class timeOfUsageDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnvalue1;
            
            private global::System.Data.DataColumn columnvalue2;
            
            private global::System.Data.DataColumn columnunit1;
            
            private global::System.Data.DataColumn columnunit2;
            
            private global::System.Data.DataColumn columnconstraints_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public timeOfUsageDataTable() {
                this.TableName = "timeOfUsage";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal timeOfUsageDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected timeOfUsageDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn value1Column {
                get {
                    return this.columnvalue1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn value2Column {
                get {
                    return this.columnvalue2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unit1Column {
                get {
                    return this.columnunit1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unit2Column {
                get {
                    return this.columnunit2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn constraints_IdColumn {
                get {
                    return this.columnconstraints_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public timeOfUsageRow this[int index] {
                get {
                    return ((timeOfUsageRow)(this.Rows[index]));
                }
            }
            
            public event timeOfUsageRowChangeEventHandler timeOfUsageRowChanging;
            
            public event timeOfUsageRowChangeEventHandler timeOfUsageRowChanged;
            
            public event timeOfUsageRowChangeEventHandler timeOfUsageRowDeleting;
            
            public event timeOfUsageRowChangeEventHandler timeOfUsageRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtimeOfUsageRow(timeOfUsageRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public timeOfUsageRow AddtimeOfUsageRow(int value1, int value2, string unit1, string unit2, constraintsRow parentconstraintsRowByconstraints_timeOfUsage) {
                timeOfUsageRow rowtimeOfUsageRow = ((timeOfUsageRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        value1,
                        value2,
                        unit1,
                        unit2,
                        null};
                if ((parentconstraintsRowByconstraints_timeOfUsage != null)) {
                    columnValuesArray[4] = parentconstraintsRowByconstraints_timeOfUsage[0];
                }
                rowtimeOfUsageRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtimeOfUsageRow);
                return rowtimeOfUsageRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                timeOfUsageDataTable cln = ((timeOfUsageDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new timeOfUsageDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnvalue1 = base.Columns["value1"];
                this.columnvalue2 = base.Columns["value2"];
                this.columnunit1 = base.Columns["unit1"];
                this.columnunit2 = base.Columns["unit2"];
                this.columnconstraints_Id = base.Columns["constraints_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnvalue1 = new global::System.Data.DataColumn("value1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnvalue1);
                this.columnvalue2 = new global::System.Data.DataColumn("value2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnvalue2);
                this.columnunit1 = new global::System.Data.DataColumn("unit1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunit1);
                this.columnunit2 = new global::System.Data.DataColumn("unit2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunit2);
                this.columnconstraints_Id = new global::System.Data.DataColumn("constraints_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnconstraints_Id);
                this.columnvalue1.AllowDBNull = false;
                this.columnvalue2.AllowDBNull = false;
                this.columnunit1.AllowDBNull = false;
                this.columnunit1.DefaultValue = ((string)("day"));
                this.columnunit2.AllowDBNull = false;
                this.columnunit2.DefaultValue = ((string)("month"));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public timeOfUsageRow NewtimeOfUsageRow() {
                return ((timeOfUsageRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new timeOfUsageRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(timeOfUsageRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.timeOfUsageRowChanged != null)) {
                    this.timeOfUsageRowChanged(this, new timeOfUsageRowChangeEvent(((timeOfUsageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.timeOfUsageRowChanging != null)) {
                    this.timeOfUsageRowChanging(this, new timeOfUsageRowChangeEvent(((timeOfUsageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.timeOfUsageRowDeleted != null)) {
                    this.timeOfUsageRowDeleted(this, new timeOfUsageRowChangeEvent(((timeOfUsageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.timeOfUsageRowDeleting != null)) {
                    this.timeOfUsageRowDeleting(this, new timeOfUsageRowChangeEvent(((timeOfUsageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetimeOfUsageRow(timeOfUsageRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Query ds = new Query();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "timeOfUsageDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class durationOfUsageDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnvalue;
            
            private global::System.Data.DataColumn columnunit;
            
            private global::System.Data.DataColumn columnconstraints_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public durationOfUsageDataTable() {
                this.TableName = "durationOfUsage";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal durationOfUsageDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected durationOfUsageDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn valueColumn {
                get {
                    return this.columnvalue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unitColumn {
                get {
                    return this.columnunit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn constraints_IdColumn {
                get {
                    return this.columnconstraints_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public durationOfUsageRow this[int index] {
                get {
                    return ((durationOfUsageRow)(this.Rows[index]));
                }
            }
            
            public event durationOfUsageRowChangeEventHandler durationOfUsageRowChanging;
            
            public event durationOfUsageRowChangeEventHandler durationOfUsageRowChanged;
            
            public event durationOfUsageRowChangeEventHandler durationOfUsageRowDeleting;
            
            public event durationOfUsageRowChangeEventHandler durationOfUsageRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddurationOfUsageRow(durationOfUsageRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public durationOfUsageRow AdddurationOfUsageRow(int value, string unit, constraintsRow parentconstraintsRowByconstraints_durationOfUsage) {
                durationOfUsageRow rowdurationOfUsageRow = ((durationOfUsageRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        value,
                        unit,
                        null};
                if ((parentconstraintsRowByconstraints_durationOfUsage != null)) {
                    columnValuesArray[2] = parentconstraintsRowByconstraints_durationOfUsage[0];
                }
                rowdurationOfUsageRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdurationOfUsageRow);
                return rowdurationOfUsageRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                durationOfUsageDataTable cln = ((durationOfUsageDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new durationOfUsageDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnvalue = base.Columns["value"];
                this.columnunit = base.Columns["unit"];
                this.columnconstraints_Id = base.Columns["constraints_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnvalue = new global::System.Data.DataColumn("value", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnvalue);
                this.columnunit = new global::System.Data.DataColumn("unit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunit);
                this.columnconstraints_Id = new global::System.Data.DataColumn("constraints_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnconstraints_Id);
                this.columnvalue.AllowDBNull = false;
                this.columnunit.AllowDBNull = false;
                this.columnunit.DefaultValue = ((string)("hour"));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public durationOfUsageRow NewdurationOfUsageRow() {
                return ((durationOfUsageRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new durationOfUsageRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(durationOfUsageRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.durationOfUsageRowChanged != null)) {
                    this.durationOfUsageRowChanged(this, new durationOfUsageRowChangeEvent(((durationOfUsageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.durationOfUsageRowChanging != null)) {
                    this.durationOfUsageRowChanging(this, new durationOfUsageRowChangeEvent(((durationOfUsageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.durationOfUsageRowDeleted != null)) {
                    this.durationOfUsageRowDeleted(this, new durationOfUsageRowChangeEvent(((durationOfUsageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.durationOfUsageRowDeleting != null)) {
                    this.durationOfUsageRowDeleting(this, new durationOfUsageRowChangeEvent(((durationOfUsageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedurationOfUsageRow(durationOfUsageRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Query ds = new Query();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "durationOfUsageDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class requestFeaturesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnstartDate;
            
            private global::System.Data.DataColumn columnendDate;
            
            private global::System.Data.DataColumn columnrequestFeatures_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public requestFeaturesDataTable() {
                this.TableName = "requestFeatures";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal requestFeaturesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected requestFeaturesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn startDateColumn {
                get {
                    return this.columnstartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn endDateColumn {
                get {
                    return this.columnendDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn requestFeatures_IdColumn {
                get {
                    return this.columnrequestFeatures_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public requestFeaturesRow this[int index] {
                get {
                    return ((requestFeaturesRow)(this.Rows[index]));
                }
            }
            
            public event requestFeaturesRowChangeEventHandler requestFeaturesRowChanging;
            
            public event requestFeaturesRowChangeEventHandler requestFeaturesRowChanged;
            
            public event requestFeaturesRowChangeEventHandler requestFeaturesRowDeleting;
            
            public event requestFeaturesRowChangeEventHandler requestFeaturesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddrequestFeaturesRow(requestFeaturesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public requestFeaturesRow AddrequestFeaturesRow(System.DateTime startDate, System.DateTime endDate) {
                requestFeaturesRow rowrequestFeaturesRow = ((requestFeaturesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        startDate,
                        endDate,
                        null};
                rowrequestFeaturesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowrequestFeaturesRow);
                return rowrequestFeaturesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                requestFeaturesDataTable cln = ((requestFeaturesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new requestFeaturesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnstartDate = base.Columns["startDate"];
                this.columnendDate = base.Columns["endDate"];
                this.columnrequestFeatures_Id = base.Columns["requestFeatures_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnstartDate = new global::System.Data.DataColumn("startDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstartDate);
                this.columnendDate = new global::System.Data.DataColumn("endDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnendDate);
                this.columnrequestFeatures_Id = new global::System.Data.DataColumn("requestFeatures_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnrequestFeatures_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnrequestFeatures_Id}, true));
                this.columnstartDate.AllowDBNull = false;
                this.columnendDate.AllowDBNull = false;
                this.columnrequestFeatures_Id.AutoIncrement = true;
                this.columnrequestFeatures_Id.AllowDBNull = false;
                this.columnrequestFeatures_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public requestFeaturesRow NewrequestFeaturesRow() {
                return ((requestFeaturesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new requestFeaturesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(requestFeaturesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.requestFeaturesRowChanged != null)) {
                    this.requestFeaturesRowChanged(this, new requestFeaturesRowChangeEvent(((requestFeaturesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.requestFeaturesRowChanging != null)) {
                    this.requestFeaturesRowChanging(this, new requestFeaturesRowChangeEvent(((requestFeaturesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.requestFeaturesRowDeleted != null)) {
                    this.requestFeaturesRowDeleted(this, new requestFeaturesRowChangeEvent(((requestFeaturesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.requestFeaturesRowDeleting != null)) {
                    this.requestFeaturesRowDeleting(this, new requestFeaturesRowChangeEvent(((requestFeaturesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoverequestFeaturesRow(requestFeaturesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Query ds = new Query();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "requestFeaturesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class preferencesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnpreferences_Id;
            
            private global::System.Data.DataColumn columnrequestFeatures_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public preferencesDataTable() {
                this.TableName = "preferences";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal preferencesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected preferencesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn preferences_IdColumn {
                get {
                    return this.columnpreferences_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn requestFeatures_IdColumn {
                get {
                    return this.columnrequestFeatures_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public preferencesRow this[int index] {
                get {
                    return ((preferencesRow)(this.Rows[index]));
                }
            }
            
            public event preferencesRowChangeEventHandler preferencesRowChanging;
            
            public event preferencesRowChangeEventHandler preferencesRowChanged;
            
            public event preferencesRowChangeEventHandler preferencesRowDeleting;
            
            public event preferencesRowChangeEventHandler preferencesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddpreferencesRow(preferencesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public preferencesRow AddpreferencesRow(requestFeaturesRow parentrequestFeaturesRowByrequestFeatures_preferences) {
                preferencesRow rowpreferencesRow = ((preferencesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentrequestFeaturesRowByrequestFeatures_preferences != null)) {
                    columnValuesArray[1] = parentrequestFeaturesRowByrequestFeatures_preferences[2];
                }
                rowpreferencesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowpreferencesRow);
                return rowpreferencesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                preferencesDataTable cln = ((preferencesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new preferencesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnpreferences_Id = base.Columns["preferences_Id"];
                this.columnrequestFeatures_Id = base.Columns["requestFeatures_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnpreferences_Id = new global::System.Data.DataColumn("preferences_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnpreferences_Id);
                this.columnrequestFeatures_Id = new global::System.Data.DataColumn("requestFeatures_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnrequestFeatures_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnpreferences_Id}, true));
                this.columnpreferences_Id.AutoIncrement = true;
                this.columnpreferences_Id.AllowDBNull = false;
                this.columnpreferences_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public preferencesRow NewpreferencesRow() {
                return ((preferencesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new preferencesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(preferencesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.preferencesRowChanged != null)) {
                    this.preferencesRowChanged(this, new preferencesRowChangeEvent(((preferencesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.preferencesRowChanging != null)) {
                    this.preferencesRowChanging(this, new preferencesRowChangeEvent(((preferencesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.preferencesRowDeleted != null)) {
                    this.preferencesRowDeleted(this, new preferencesRowChangeEvent(((preferencesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.preferencesRowDeleting != null)) {
                    this.preferencesRowDeleting(this, new preferencesRowChangeEvent(((preferencesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovepreferencesRow(preferencesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Query ds = new Query();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "preferencesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class itemDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnattrName;
            
            private global::System.Data.DataColumn columnpriority;
            
            private global::System.Data.DataColumn columnweight;
            
            private global::System.Data.DataColumn columnpreferences_Id;
            
            private global::System.Data.DataColumn columnRelaxationSet_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public itemDataTable() {
                this.TableName = "item";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal itemDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected itemDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn attrNameColumn {
                get {
                    return this.columnattrName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn priorityColumn {
                get {
                    return this.columnpriority;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn weightColumn {
                get {
                    return this.columnweight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn preferences_IdColumn {
                get {
                    return this.columnpreferences_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RelaxationSet_IdColumn {
                get {
                    return this.columnRelaxationSet_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public itemRow this[int index] {
                get {
                    return ((itemRow)(this.Rows[index]));
                }
            }
            
            public event itemRowChangeEventHandler itemRowChanging;
            
            public event itemRowChangeEventHandler itemRowChanged;
            
            public event itemRowChangeEventHandler itemRowDeleting;
            
            public event itemRowChangeEventHandler itemRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdditemRow(itemRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public itemRow AdditemRow(string attrName, int priority, float weight, preferencesRow parentpreferencesRowBypreferences_item, RelaxationSetRow parentRelaxationSetRowByRelaxationSet_item) {
                itemRow rowitemRow = ((itemRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        attrName,
                        priority,
                        weight,
                        null,
                        null};
                if ((parentpreferencesRowBypreferences_item != null)) {
                    columnValuesArray[3] = parentpreferencesRowBypreferences_item[0];
                }
                if ((parentRelaxationSetRowByRelaxationSet_item != null)) {
                    columnValuesArray[4] = parentRelaxationSetRowByRelaxationSet_item[0];
                }
                rowitemRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowitemRow);
                return rowitemRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                itemDataTable cln = ((itemDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new itemDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnattrName = base.Columns["attrName"];
                this.columnpriority = base.Columns["priority"];
                this.columnweight = base.Columns["weight"];
                this.columnpreferences_Id = base.Columns["preferences_Id"];
                this.columnRelaxationSet_Id = base.Columns["RelaxationSet_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnattrName = new global::System.Data.DataColumn("attrName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnattrName);
                this.columnpriority = new global::System.Data.DataColumn("priority", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpriority);
                this.columnweight = new global::System.Data.DataColumn("weight", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnweight);
                this.columnpreferences_Id = new global::System.Data.DataColumn("preferences_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnpreferences_Id);
                this.columnRelaxationSet_Id = new global::System.Data.DataColumn("RelaxationSet_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRelaxationSet_Id);
                this.columnattrName.AllowDBNull = false;
                this.columnpriority.AllowDBNull = false;
                this.columnweight.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public itemRow NewitemRow() {
                return ((itemRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new itemRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(itemRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.itemRowChanged != null)) {
                    this.itemRowChanged(this, new itemRowChangeEvent(((itemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.itemRowChanging != null)) {
                    this.itemRowChanging(this, new itemRowChangeEvent(((itemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.itemRowDeleted != null)) {
                    this.itemRowDeleted(this, new itemRowChangeEvent(((itemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.itemRowDeleting != null)) {
                    this.itemRowDeleting(this, new itemRowChangeEvent(((itemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveitemRow(itemRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Query ds = new Query();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "itemDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RelaxationSetDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRelaxationSet_Id;
            
            private global::System.Data.DataColumn columnrequestFeatures_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RelaxationSetDataTable() {
                this.TableName = "RelaxationSet";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RelaxationSetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RelaxationSetDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RelaxationSet_IdColumn {
                get {
                    return this.columnRelaxationSet_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn requestFeatures_IdColumn {
                get {
                    return this.columnrequestFeatures_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RelaxationSetRow this[int index] {
                get {
                    return ((RelaxationSetRow)(this.Rows[index]));
                }
            }
            
            public event RelaxationSetRowChangeEventHandler RelaxationSetRowChanging;
            
            public event RelaxationSetRowChangeEventHandler RelaxationSetRowChanged;
            
            public event RelaxationSetRowChangeEventHandler RelaxationSetRowDeleting;
            
            public event RelaxationSetRowChangeEventHandler RelaxationSetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRelaxationSetRow(RelaxationSetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RelaxationSetRow AddRelaxationSetRow(requestFeaturesRow parentrequestFeaturesRowByrequestFeatures_RelaxationSet) {
                RelaxationSetRow rowRelaxationSetRow = ((RelaxationSetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentrequestFeaturesRowByrequestFeatures_RelaxationSet != null)) {
                    columnValuesArray[1] = parentrequestFeaturesRowByrequestFeatures_RelaxationSet[2];
                }
                rowRelaxationSetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRelaxationSetRow);
                return rowRelaxationSetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RelaxationSetDataTable cln = ((RelaxationSetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RelaxationSetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRelaxationSet_Id = base.Columns["RelaxationSet_Id"];
                this.columnrequestFeatures_Id = base.Columns["requestFeatures_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRelaxationSet_Id = new global::System.Data.DataColumn("RelaxationSet_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRelaxationSet_Id);
                this.columnrequestFeatures_Id = new global::System.Data.DataColumn("requestFeatures_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnrequestFeatures_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRelaxationSet_Id}, true));
                this.columnRelaxationSet_Id.AutoIncrement = true;
                this.columnRelaxationSet_Id.AllowDBNull = false;
                this.columnRelaxationSet_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RelaxationSetRow NewRelaxationSetRow() {
                return ((RelaxationSetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RelaxationSetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RelaxationSetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RelaxationSetRowChanged != null)) {
                    this.RelaxationSetRowChanged(this, new RelaxationSetRowChangeEvent(((RelaxationSetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RelaxationSetRowChanging != null)) {
                    this.RelaxationSetRowChanging(this, new RelaxationSetRowChangeEvent(((RelaxationSetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RelaxationSetRowDeleted != null)) {
                    this.RelaxationSetRowDeleted(this, new RelaxationSetRowChangeEvent(((RelaxationSetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RelaxationSetRowDeleting != null)) {
                    this.RelaxationSetRowDeleting(this, new RelaxationSetRowChangeEvent(((RelaxationSetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRelaxationSetRow(RelaxationSetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Query ds = new Query();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RelaxationSetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class constraintsRow : global::System.Data.DataRow {
            
            private constraintsDataTable tableconstraints;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal constraintsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableconstraints = ((constraintsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int constraints_Id {
                get {
                    return ((int)(this[this.tableconstraints.constraints_IdColumn]));
                }
                set {
                    this[this.tableconstraints.constraints_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public priceRow[] GetpriceRows() {
                if ((this.Table.ChildRelations["constraints_price"] == null)) {
                    return new priceRow[0];
                }
                else {
                    return ((priceRow[])(base.GetChildRows(this.Table.ChildRelations["constraints_price"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public responseTimeRow[] GetresponseTimeRows() {
                if ((this.Table.ChildRelations["constraints_responseTime"] == null)) {
                    return new responseTimeRow[0];
                }
                else {
                    return ((responseTimeRow[])(base.GetChildRows(this.Table.ChildRelations["constraints_responseTime"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public availablityRow[] GetavailablityRows() {
                if ((this.Table.ChildRelations["constraints_availablity"] == null)) {
                    return new availablityRow[0];
                }
                else {
                    return ((availablityRow[])(base.GetChildRows(this.Table.ChildRelations["constraints_availablity"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public timeOfUsageRow[] GettimeOfUsageRows() {
                if ((this.Table.ChildRelations["constraints_timeOfUsage"] == null)) {
                    return new timeOfUsageRow[0];
                }
                else {
                    return ((timeOfUsageRow[])(base.GetChildRows(this.Table.ChildRelations["constraints_timeOfUsage"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public durationOfUsageRow[] GetdurationOfUsageRows() {
                if ((this.Table.ChildRelations["constraints_durationOfUsage"] == null)) {
                    return new durationOfUsageRow[0];
                }
                else {
                    return ((durationOfUsageRow[])(base.GetChildRows(this.Table.ChildRelations["constraints_durationOfUsage"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class priceRow : global::System.Data.DataRow {
            
            private priceDataTable tableprice;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal priceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableprice = ((priceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int from {
                get {
                    return ((int)(this[this.tableprice.fromColumn]));
                }
                set {
                    this[this.tableprice.fromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int to {
                get {
                    return ((int)(this[this.tableprice.toColumn]));
                }
                set {
                    this[this.tableprice.toColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string unit {
                get {
                    return ((string)(this[this.tableprice.unitColumn]));
                }
                set {
                    this[this.tableprice.unitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int valueType {
                get {
                    return ((int)(this[this.tableprice.valueTypeColumn]));
                }
                set {
                    this[this.tableprice.valueTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int constraints_Id {
                get {
                    try {
                        return ((int)(this[this.tableprice.constraints_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'constraints_Id\' in table \'price\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprice.constraints_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public constraintsRow constraintsRow {
                get {
                    return ((constraintsRow)(this.GetParentRow(this.Table.ParentRelations["constraints_price"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["constraints_price"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isconstraints_IdNull() {
                return this.IsNull(this.tableprice.constraints_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setconstraints_IdNull() {
                this[this.tableprice.constraints_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class responseTimeRow : global::System.Data.DataRow {
            
            private responseTimeDataTable tableresponseTime;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal responseTimeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableresponseTime = ((responseTimeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int value {
                get {
                    return ((int)(this[this.tableresponseTime.valueColumn]));
                }
                set {
                    this[this.tableresponseTime.valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string unit {
                get {
                    return ((string)(this[this.tableresponseTime.unitColumn]));
                }
                set {
                    this[this.tableresponseTime.unitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int valueType {
                get {
                    return ((int)(this[this.tableresponseTime.valueTypeColumn]));
                }
                set {
                    this[this.tableresponseTime.valueTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int constraints_Id {
                get {
                    try {
                        return ((int)(this[this.tableresponseTime.constraints_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'constraints_Id\' in table \'responseTime\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableresponseTime.constraints_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public constraintsRow constraintsRow {
                get {
                    return ((constraintsRow)(this.GetParentRow(this.Table.ParentRelations["constraints_responseTime"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["constraints_responseTime"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isconstraints_IdNull() {
                return this.IsNull(this.tableresponseTime.constraints_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setconstraints_IdNull() {
                this[this.tableresponseTime.constraints_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class availablityRow : global::System.Data.DataRow {
            
            private availablityDataTable tableavailablity;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal availablityRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableavailablity = ((availablityDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string value {
                get {
                    return ((string)(this[this.tableavailablity.valueColumn]));
                }
                set {
                    this[this.tableavailablity.valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string unit {
                get {
                    return ((string)(this[this.tableavailablity.unitColumn]));
                }
                set {
                    this[this.tableavailablity.unitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int valueType {
                get {
                    return ((int)(this[this.tableavailablity.valueTypeColumn]));
                }
                set {
                    this[this.tableavailablity.valueTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int constraints_Id {
                get {
                    try {
                        return ((int)(this[this.tableavailablity.constraints_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'constraints_Id\' in table \'availablity\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableavailablity.constraints_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public constraintsRow constraintsRow {
                get {
                    return ((constraintsRow)(this.GetParentRow(this.Table.ParentRelations["constraints_availablity"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["constraints_availablity"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isconstraints_IdNull() {
                return this.IsNull(this.tableavailablity.constraints_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setconstraints_IdNull() {
                this[this.tableavailablity.constraints_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class timeOfUsageRow : global::System.Data.DataRow {
            
            private timeOfUsageDataTable tabletimeOfUsage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal timeOfUsageRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletimeOfUsage = ((timeOfUsageDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int value1 {
                get {
                    return ((int)(this[this.tabletimeOfUsage.value1Column]));
                }
                set {
                    this[this.tabletimeOfUsage.value1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int value2 {
                get {
                    return ((int)(this[this.tabletimeOfUsage.value2Column]));
                }
                set {
                    this[this.tabletimeOfUsage.value2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string unit1 {
                get {
                    return ((string)(this[this.tabletimeOfUsage.unit1Column]));
                }
                set {
                    this[this.tabletimeOfUsage.unit1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string unit2 {
                get {
                    return ((string)(this[this.tabletimeOfUsage.unit2Column]));
                }
                set {
                    this[this.tabletimeOfUsage.unit2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int constraints_Id {
                get {
                    try {
                        return ((int)(this[this.tabletimeOfUsage.constraints_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'constraints_Id\' in table \'timeOfUsage\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletimeOfUsage.constraints_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public constraintsRow constraintsRow {
                get {
                    return ((constraintsRow)(this.GetParentRow(this.Table.ParentRelations["constraints_timeOfUsage"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["constraints_timeOfUsage"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isconstraints_IdNull() {
                return this.IsNull(this.tabletimeOfUsage.constraints_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setconstraints_IdNull() {
                this[this.tabletimeOfUsage.constraints_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class durationOfUsageRow : global::System.Data.DataRow {
            
            private durationOfUsageDataTable tabledurationOfUsage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal durationOfUsageRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledurationOfUsage = ((durationOfUsageDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int value {
                get {
                    return ((int)(this[this.tabledurationOfUsage.valueColumn]));
                }
                set {
                    this[this.tabledurationOfUsage.valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string unit {
                get {
                    return ((string)(this[this.tabledurationOfUsage.unitColumn]));
                }
                set {
                    this[this.tabledurationOfUsage.unitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int constraints_Id {
                get {
                    try {
                        return ((int)(this[this.tabledurationOfUsage.constraints_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'constraints_Id\' in table \'durationOfUsage\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledurationOfUsage.constraints_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public constraintsRow constraintsRow {
                get {
                    return ((constraintsRow)(this.GetParentRow(this.Table.ParentRelations["constraints_durationOfUsage"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["constraints_durationOfUsage"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isconstraints_IdNull() {
                return this.IsNull(this.tabledurationOfUsage.constraints_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setconstraints_IdNull() {
                this[this.tabledurationOfUsage.constraints_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class requestFeaturesRow : global::System.Data.DataRow {
            
            private requestFeaturesDataTable tablerequestFeatures;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal requestFeaturesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablerequestFeatures = ((requestFeaturesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime startDate {
                get {
                    return ((global::System.DateTime)(this[this.tablerequestFeatures.startDateColumn]));
                }
                set {
                    this[this.tablerequestFeatures.startDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime endDate {
                get {
                    return ((global::System.DateTime)(this[this.tablerequestFeatures.endDateColumn]));
                }
                set {
                    this[this.tablerequestFeatures.endDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int requestFeatures_Id {
                get {
                    return ((int)(this[this.tablerequestFeatures.requestFeatures_IdColumn]));
                }
                set {
                    this[this.tablerequestFeatures.requestFeatures_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public preferencesRow[] GetpreferencesRows() {
                if ((this.Table.ChildRelations["requestFeatures_preferences"] == null)) {
                    return new preferencesRow[0];
                }
                else {
                    return ((preferencesRow[])(base.GetChildRows(this.Table.ChildRelations["requestFeatures_preferences"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RelaxationSetRow[] GetRelaxationSetRows() {
                if ((this.Table.ChildRelations["requestFeatures_RelaxationSet"] == null)) {
                    return new RelaxationSetRow[0];
                }
                else {
                    return ((RelaxationSetRow[])(base.GetChildRows(this.Table.ChildRelations["requestFeatures_RelaxationSet"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class preferencesRow : global::System.Data.DataRow {
            
            private preferencesDataTable tablepreferences;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal preferencesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablepreferences = ((preferencesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int preferences_Id {
                get {
                    return ((int)(this[this.tablepreferences.preferences_IdColumn]));
                }
                set {
                    this[this.tablepreferences.preferences_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int requestFeatures_Id {
                get {
                    try {
                        return ((int)(this[this.tablepreferences.requestFeatures_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'requestFeatures_Id\' in table \'preferences\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepreferences.requestFeatures_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public requestFeaturesRow requestFeaturesRow {
                get {
                    return ((requestFeaturesRow)(this.GetParentRow(this.Table.ParentRelations["requestFeatures_preferences"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["requestFeatures_preferences"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrequestFeatures_IdNull() {
                return this.IsNull(this.tablepreferences.requestFeatures_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrequestFeatures_IdNull() {
                this[this.tablepreferences.requestFeatures_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public itemRow[] GetitemRows() {
                if ((this.Table.ChildRelations["preferences_item"] == null)) {
                    return new itemRow[0];
                }
                else {
                    return ((itemRow[])(base.GetChildRows(this.Table.ChildRelations["preferences_item"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class itemRow : global::System.Data.DataRow {
            
            private itemDataTable tableitem;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal itemRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableitem = ((itemDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string attrName {
                get {
                    return ((string)(this[this.tableitem.attrNameColumn]));
                }
                set {
                    this[this.tableitem.attrNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int priority {
                get {
                    return ((int)(this[this.tableitem.priorityColumn]));
                }
                set {
                    this[this.tableitem.priorityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float weight {
                get {
                    return ((float)(this[this.tableitem.weightColumn]));
                }
                set {
                    this[this.tableitem.weightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int preferences_Id {
                get {
                    try {
                        return ((int)(this[this.tableitem.preferences_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'preferences_Id\' in table \'item\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitem.preferences_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RelaxationSet_Id {
                get {
                    try {
                        return ((int)(this[this.tableitem.RelaxationSet_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RelaxationSet_Id\' in table \'item\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableitem.RelaxationSet_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public preferencesRow preferencesRow {
                get {
                    return ((preferencesRow)(this.GetParentRow(this.Table.ParentRelations["preferences_item"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["preferences_item"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RelaxationSetRow RelaxationSetRow {
                get {
                    return ((RelaxationSetRow)(this.GetParentRow(this.Table.ParentRelations["RelaxationSet_item"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["RelaxationSet_item"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispreferences_IdNull() {
                return this.IsNull(this.tableitem.preferences_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpreferences_IdNull() {
                this[this.tableitem.preferences_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRelaxationSet_IdNull() {
                return this.IsNull(this.tableitem.RelaxationSet_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRelaxationSet_IdNull() {
                this[this.tableitem.RelaxationSet_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RelaxationSetRow : global::System.Data.DataRow {
            
            private RelaxationSetDataTable tableRelaxationSet;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RelaxationSetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRelaxationSet = ((RelaxationSetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RelaxationSet_Id {
                get {
                    return ((int)(this[this.tableRelaxationSet.RelaxationSet_IdColumn]));
                }
                set {
                    this[this.tableRelaxationSet.RelaxationSet_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int requestFeatures_Id {
                get {
                    try {
                        return ((int)(this[this.tableRelaxationSet.requestFeatures_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'requestFeatures_Id\' in table \'RelaxationSet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRelaxationSet.requestFeatures_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public requestFeaturesRow requestFeaturesRow {
                get {
                    return ((requestFeaturesRow)(this.GetParentRow(this.Table.ParentRelations["requestFeatures_RelaxationSet"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["requestFeatures_RelaxationSet"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrequestFeatures_IdNull() {
                return this.IsNull(this.tableRelaxationSet.requestFeatures_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrequestFeatures_IdNull() {
                this[this.tableRelaxationSet.requestFeatures_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public itemRow[] GetitemRows() {
                if ((this.Table.ChildRelations["RelaxationSet_item"] == null)) {
                    return new itemRow[0];
                }
                else {
                    return ((itemRow[])(base.GetChildRows(this.Table.ChildRelations["RelaxationSet_item"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class constraintsRowChangeEvent : global::System.EventArgs {
            
            private constraintsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public constraintsRowChangeEvent(constraintsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public constraintsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class priceRowChangeEvent : global::System.EventArgs {
            
            private priceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public priceRowChangeEvent(priceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public priceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class responseTimeRowChangeEvent : global::System.EventArgs {
            
            private responseTimeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public responseTimeRowChangeEvent(responseTimeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public responseTimeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class availablityRowChangeEvent : global::System.EventArgs {
            
            private availablityRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public availablityRowChangeEvent(availablityRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public availablityRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class timeOfUsageRowChangeEvent : global::System.EventArgs {
            
            private timeOfUsageRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public timeOfUsageRowChangeEvent(timeOfUsageRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public timeOfUsageRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class durationOfUsageRowChangeEvent : global::System.EventArgs {
            
            private durationOfUsageRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public durationOfUsageRowChangeEvent(durationOfUsageRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public durationOfUsageRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class requestFeaturesRowChangeEvent : global::System.EventArgs {
            
            private requestFeaturesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public requestFeaturesRowChangeEvent(requestFeaturesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public requestFeaturesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class preferencesRowChangeEvent : global::System.EventArgs {
            
            private preferencesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public preferencesRowChangeEvent(preferencesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public preferencesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class itemRowChangeEvent : global::System.EventArgs {
            
            private itemRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public itemRowChangeEvent(itemRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public itemRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RelaxationSetRowChangeEvent : global::System.EventArgs {
            
            private RelaxationSetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RelaxationSetRowChangeEvent(RelaxationSetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RelaxationSetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
